#include<bits/stdc++.h>
using namespace std;
void RabinKarp(string pattern, string txt,int q){
    int n = txt.length();
    int m = pattern.length();
    int h = 1;
    int i,j;
    int p=0;
    int t=0;
    //d is the no. of characters in input alphabet
    int d = 256;

    for(int i=0;i<m-1;i++){
        h = (h*d)%q;
    }
    // Calculate the hash value of pattern and first
    // window of text
    for( i=0;i<m;i++){
        p = (d*p+pattern[i] )%q;
        t = (d*t+txt[i] )%q;
    }

    for( i=0;i<=n-m;i++){
        if(p==t){
            for( j=0;j<m;j++){
                if(pattern[j]!=txt[i+j])
                break;
            }
            if(j==m){
                cout<<"pattern found at index : "<<i<<endl;
            }
        }
        if(i<n-m){
            t = (d*(t-txt[i]*h) + txt[i+m])%q;
        }
        if(t<0){
            t = t+q;
        }
    }

}
int main(){
    string txt;
    string pattern;
    cout << "Enter the text string: ";
    getline(cin, txt);
    cout << "Enter the pattern string: ";
    getline(cin, pattern);
    int q = INT_MAX; // A large prime number
    RabinKarp(pattern,txt,q);

}
