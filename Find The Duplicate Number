class Solution {
public:
    int findDuplicate(vector<int>& nums) {
         sort(nums.begin(),nums.end());
           if(nums[i]==nums[i-1])
                return nums[i];
        }
         return -1;
    }
};

//Method 2
  int findDuplicate(vector<int>& nums) {
    
    //T.C = O(N)
    //S.C = O(N)
       int n = nums.size();
       vector<int>v(n+1,0);
    //    memset(v,0,sizeof(v));
       int ans = -1;
       for(int i=0;i<=n;i++){
            if(v[nums[i]]==0){
                v[nums[i]]=1;
            }
            else {
                ans = nums[i];
                return nums[i];
            }
       }
       return ans;
}
};


//Method 3 and the required one
    int findDuplicate(vector<int>& nums) {
        // //1,3,4,2,2
        // //s
        // //f
        // //lets say they are on same position at they begining
        int slow = nums[0];
        int fast = nums[0];
        
     
        slow = nums[slow];
        fast = nums[nums[fast]];

        //detect cycle
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        //since they meeted first so we are moving again
        //now this time when they will meet that will be the repeated point

        slow = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;


    }
};
