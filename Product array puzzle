//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        using ll = long long int;
        ll pro = 1;
        int cnt=0;
        int n = nums.size();
        int index = -1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
            cnt++;
            index=i;
            }
            else
            pro *=nums[i];
        }
        if(cnt>1){
            vector<ll>ans(n,0);
            return ans;
        }
        vector<ll>ans;
        for(int i=0;i<n;i++){
            if(i!=index && index>=0)
            ans.push_back(0);
            else {
                if(nums[i]==0){
                    ans.push_back(pro);
                }
                else
                ans.push_back(pro/nums[i]);
            }
        }
        
        
        return ans;
    }
};


//{ Driver Code Starts.
int main() {
    int t; // number of test cases
    cin >> t;
    while (t--) {
        int n; // size of the array
        cin >> n;
        vector<long long int> arr(n), vec(n);

        for (int i = 0; i < n; i++) // input the array
        {
            cin >> arr[i];
        }
        Solution obj;
        vec = obj.productExceptSelf(arr); // function call

        for (int i = 0; i < n; i++) // print the output
        {
            cout << vec[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
